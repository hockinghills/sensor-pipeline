# ESPHome configuration for Furnace ESP32
# Writes directly to InfluxDB, bypassing MQTT/Telegraf
# Uses measurement name "furnace_esphome" to run in parallel with existing "furnace" data

substitutions:
  device_name: furnace-esp32
  measurement_name: furnace_esphome
  influxdb_url: !secret influxdb_url
  influxdb_org: !secret influxdb_org
  influxdb_bucket: !secret influxdb_bucket
  influxdb_token: !secret influxdb_token

esphome:
  name: ${device_name}

esp32:
  board: esp32dev
  framework:
    type: arduino

# WiFi Configuration
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Fallback hotspot (if WiFi fails)
  ap:
    ssid: "Furnace-ESP32-Fallback"
    password: !secret ap_password

# Enable fallback hotspot portal
captive_portal:

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API with encryption (replaces deprecated password auth)
api:
  encryption:
    key: !secret api_encryption_key

# Enable OTA updates
ota:
  - platform: esphome
    password: !secret ota_password

# Enable web server for local access
web_server:
  port: 80

# Sensors
sensor:
  # WiFi Signal Strength
  - platform: wifi_signal
    name: "Furnace WiFi Signal"
    id: wifi_signal_strength
    update_interval: 60s

  # Uptime sensor
  - platform: uptime
    name: "Furnace Uptime"
    id: uptime_sensor
    update_interval: 10s

  # TODO: Add your actual temperature/sensor readings here
  # Example for Dallas temperature sensor:
  # - platform: dallas_temp
  #   address: 0x1234567890abcdef
  #   name: "Furnace Temperature"
  #   id: furnace_temp
  #   update_interval: 1s

# HTTP Request component for InfluxDB writes
http_request:
  timeout: 10s
  verify_ssl: false

# Send data to InfluxDB every 10 seconds
interval:
  - interval: 10s
    then:
      - http_request.post:
          url: !lambda |-
            std::string url = "${influxdb_url}";
            url += "/api/v2/write?org=${influxdb_org}&bucket=${influxdb_bucket}&precision=s";
            return url.c_str();
          request_headers:
            Authorization: "Token ${influxdb_token}"
            Content-Type: "text/plain; charset=utf-8"
          body: !lambda |-
            char buf[256];
            snprintf(buf, sizeof(buf),
              "${measurement_name},device=${device_name} wifi_signal=%.1f,uptime=%.0f",
              id(wifi_signal_strength).state,
              id(uptime_sensor).state
            );
            return (std::string)buf;
          on_response:
            then:
              - logger.log:
                  format: "InfluxDB write successful: %d"
                  args:
                    - status_code
          on_error:
            then:
              - logger.log: "Failed to write to InfluxDB"
